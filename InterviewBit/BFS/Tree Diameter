1. Find farthest node and then again start bfs from that node. 
// do notice in the inside loop, q.size() store it beforehand.

int Solution::solve(vector<int> &A) {
    int n = A.size();
    if(n < 3) return n-1;
    vector<int> adj[n];
    int root;
    for(int i = 0; i < n; i++){
        if(A[i] == -1) root = i;
        else{
            adj[i].push_back(A[i]);
            adj[A[i]].push_back(i);
        }
    }
    vector<int> vis(n,0);
    function<int(int)> bfs = [&](int root){
        queue<int> q;
        q.push(root);
        
        vis[root] = 1;
        int timer = 1;
        while(!q.empty()){
            timer++;
            int temp = q.size();
            for(int i = 0; i < temp; i++){
                root = q.front();
                q.pop();
                for(auto &x: adj[root]){
                    if(!vis[x]){
                        vis[x] = timer;
                        q.push(x);
                    }
                }
            }
        }
        return root;
    };
    
    root = bfs(root);
    fill(vis.begin(), vis.end(), 0);
    root = bfs(root);
    return vis[root] - 1;

}
