Here, We will use bfs to first find largest level node and then again use bfs.



int Solution::solve(vector<int> &A) {
    int n = A.size();
    if(n == 1) return 0;
    vector<int> adj[n+1];
    int root;
    for(int i = 0 ; i  < n; i++){
        if(A[i] == -1){
            root = i;
            continue;
        }
        adj[i].push_back(A[i]);
        adj[A[i]].push_back(i);
    }
    function<pair<int,int>(int)> bfs = [&](int src){
        queue<pair<int,int>> q;
        q.push({src, 0});
        vector<int> vis(n+1 , 0);
        pair<int,int> u;
        while(!q.empty()){
            u = q.front();
            vis[u.first] = 1;
            q.pop();
            for(auto x: adj[u.first]){
                if(!vis[x]){
                    q.push({x, u.second+1});
                }
            }
        }
        return u;
    };


    pair<int, int> end1 = bfs(0);
    pair<int,int> end2 = bfs(end1.first);
    return end2.second;
}
