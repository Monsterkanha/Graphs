We know all the node which are connected to boundary will gonna remain same. So run BFS mark them as B and later mark all B to O and all remaining to X.

void Solution::solve(vector<vector<char> > &A) {
    int n = A.size() , m = A[0].size();
    int dx[4] = {-1, 0, 1, 0};
    int dy[4] = {0, 1, 0, -1}; 
    function<bool(int  , int)> check = [&](int i ,int j){
        return ( i < n && i >= 0 && j < m && j >= 0 && A[i][j] == 'O' );
    };

    function<void(int ,int)> dfs = [&](int x ,int y){
        A[x][y] = '#';
        for(int i = 0; i < 4; i++){
            int X = x+ dx[i] , Y = y + dy[i];
            if(check(X,Y)){
                dfs(X,Y);
            }   
        }
    };
    
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            if(A[i][j] == 'O' && (i == 0 || j == 0 || i == n-1 || j == m-1)){
                dfs(i, j);
            }   
        }
    }
    for(int i = 0 ; i < n; i++){
        for(int j = 0; j < m ; j++){
            if(A[i][j] == '#')  A[i][j] = 'O';
            else A[i][j] = 'X';
        }
    }
}
