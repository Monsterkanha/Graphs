Here, When the current element do match we will start dfs on all four direction.
And pass a counter of string B which will tell us we are exploring this char. 
Also we don't need vis array because same can be used more than once.

So simply formulate all these. and you will get answer.

int Solution::exist(vector<string> &A, string B) {
    int dx[4] = {-1,0,1,0};
    int dy[4] = {0,1,0,-1};
    int n = B.size();
    int N = A.size() , M = A[0].size(); 
    function<int8_t(int ,int)> check = [&](int x , int y){
        return (x < N && x >= 0 && y < M && y >= 0 );
    };

    function<int8_t(int ,int ,int)> dfs = [&](int x , int y,  int cnt){
        if(cnt == n){
            return true;
        }
        for(int i = 0 ; i < 4; i++){
            int X = x + dx[i] , Y = y + dy[i];
            if(check(X, Y) && A[X][Y] == B[cnt]){
                if(dfs(X,Y , cnt + 1)) return true;
            }
        }
        return false;
    };
    for(int i = 0 ; i < N ; i++){
        for(int j = 0 ; j < M; j++){
            if(A[i][j] == B[0]){
                if(dfs(i,j,1))  return 1;
            }
        }
    }
    return 0;
    
}
