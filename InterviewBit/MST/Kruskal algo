Here, idea is to sort edges with non descending order of their weight and then select the minimum edge and if its two end points
are belong to same set then do nothing else merge them.


const int Max = 6e4 + 5;
int parent[Max] , Rank[Max];
int n;

// Path compression.
int find(int x){
    if(x == parent[x]) return x;
    return parent[x] = find(parent[x]);
}

// Union by rank.
void union1(int x, int y){
    if(Rank[x] < Rank[y]){
        swap(x, y);
    }
    parent[y] = x;
    if(Rank[x] == Rank[y])  Rank[x]++;
}


int kruskal(pair<int, pair<int,int>> p[]){
    int ans = 0;
    for(int i = 0; i < n; i++){
        int x = p[i].second.first , y = p[i].second.second , cost = p[i].first;
        x = find(x) , y = find(y);
        if(x != y){
            ans += cost;
            union1(x,y);
        }
    }
    return ans;
}
int Solution::solve(int A, vector<vector<int> > &B) {
    n = B.size();
    for(int i = 0 ; i < Max; i++){
        parent[i] = i;
        Rank[i] = 0;
    }
    pair<int, pair<int,int>> p[B.size()];
    for(int i = 0 ; i < n; i++){
        int x = B[i][0] , y = B[i][1] , w = B[i][2];
        p[i] = {w, {x,y}};
    }
    sort(p , p + n);
    return kruskal(p);
    
}
