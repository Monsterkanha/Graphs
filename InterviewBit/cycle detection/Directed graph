1. Rec stack is needed since whether to check this node is visited in my current dfs or was it part of some other dfs.

        |
        `
eg. ->->->->->


int Solution::solve(int A, vector<int> &B, vector<int> &C) {
    vector<int> adj[A+1], in(A+1), vis(A+1,0), rec(A+1,0);
    int n = B.size();
    for(int i = 0; i < n; i++){
        adj[B[i]].push_back(C[i]);
    }
    
    function<int(int)> dfs = [&](int node){
        vis[node] = 1;
        rec[node] = 1;  // setting it for current route.
        
        for(auto &x: adj[node]){
            if(!vis[x] && dfs(x)){
                return 1;
            }
            else if(rec[x]){
                return 1;
            }
        }
        rec[node] = 0;   // unset it for current route since this route is over.
        return 0;
    };
    
    for(int i= 1; i <= A; i++){
        if(!vis[i] && dfs(i)){
            return 0;
        }
    }
    return 1;
}
