// Karya ko arrambh karo to uska ant krne par hi viraam lo
// Anyatha karya hi tumhara Ant kar dega.  ~Guru Brishpati.

#pragma GCC optimize("O3")
#pragma GCC target("sse4")
#include<bits/stdc++.h>
#include<vector>
#include<string>
#include<deque>
#include<set>
#include<stack>

// Some type Def
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
typedef vector<vector<int>> VVI;
typedef vector<int> VI;
typedef vector<string> VS;
#define PB push_back
#define MP make_pair
#define ff first
#define ss second
#define two(w) (1<<(w))
#define test(x,w) (x&two(w))
#define sz(v) (int)v.size()
#define all(c) c.begin(),c.end() 
#define clr(buf,val) memset(buf,val,sizeof(buf))
#define rep(i,l,r) for(int i=(l); i<(r) ; i++)
#define repv(i,v)  for(int i=0;i<(int)v.size();i++)
#define repi(it,c) for(typeof(c.begin()) it=c.begin();it!=c.end();++it)
#define inf INT_MAX
#define nl "\n"
#define debug(v)  for(int i = 0 ; i < v.size() ; i++){cout<<v[i]<<" ";} cout<<"\n";
#define inparr(arr,n) int arr[n] ; for(int i = 0 ; i < n ; i++){cin>>arr[i];}

bool sortbysec(const pair<int,int> &a, const pair<int,int> &b){
    if(a.ff == b.ff)
        return (a.second < b.second);
    return (a.ff > b.ff);
}

void dvpii(vector<PII> v){
    rep(i , 0 , v.size()) cout<<i+1<<" "<<v[i].ff<<" "<<v[i].ss<<nl;
}
int  gcd(int a, int b){
    if(a == 0)  return b;
    return gcd(b%a , a);
}

bool isprime(int n){
    if(n == 2 || n == 3)
        return true;
    if(n % 2  == 0 || n% 3 == 0)
        return false;
    int i = 5;
    while(i * i <= n){
        if(n% (i ) == 0 || n%(i+2) == 0)
            return false;
        i += 6;
    }
    return true;
}
long long binpow(long long a, long long b, long long m) {
    a %= m;
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}
void canonical(int n , vector<pair<int, int>>& ans){
    for(int i = 2; i*i <= n ; i++){
        int cnt= 0;
        while(n%i == 0){
            cnt++;
            n /= i;
        }
        if(cnt > 0){
            ans.PB({i , cnt});
        }
    }
}

int divisors(int a){
    int cnt = 1;
    for(int i = 2; i <= sqrt(a) ; i++){
        if(a%i == 0){
            if(a/i ==i) cnt++;
            else cnt += 2;
        }
    }
    return cnt;
}
bool prime[10001];
void SieveOfEratosthenes(){
    int n = 1e4 + 1;
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++){
        if (prime[p] == true){
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
}
VI adj[10001] , vis(10001) , dist(10001);
bool isvalid(int a , int b){
    int cnt = 0;
    while(a > 0){
        if(a%10 != b%10)  cnt++;
        a /= 10 , b/=10;
    }
    return (cnt == 1);
}
void solve(){
    SieveOfEratosthenes();
    int n;
    cin>>n;
    vector<int> new_prime;
    for(int i = 1000 ; i<= 9999 ; i++){
        if(prime[i])    new_prime.push_back(i);
    }

    for(int i = 0 ; i < 10001 ; i++)   adj[i].clear() , vis[i] = 0;
    for(int i = 0 ; i < new_prime.size() ; i++){
        for(int j = i+1 ; j < new_prime.size(); j++){
            int a= new_prime[i] , b = new_prime[j];
            if(isvalid(a, b))  adj[a].push_back(b) , adj[b].push_back(a);
        }
    }
    rep(i , 0 , n){
        int a ,b;
        cin>>a>>b;
        // if(a == b){
        //     cout<<0<<nl;
        //     return;
        // }
        
        for(int i = 0 ; i < 10001 ; i++ ) vis[i] = 0 , dist[i] = -1;
        queue<int> q;
        q.push(a);
        vis[a] = 1;
        dist[a] = 0;
        while(!q.empty()){
            int curr = q.front();
            q.pop();
            for(int x: adj[curr]){
                if(!vis[x]){
                    vis[x] = 1;
                    q.push(x);
                    dist[x] = dist[curr] + 1;
                }
            }    
        }
        cout<<dist[b]<<nl;
        // if(dist[b] == -1)   cout<<"Impossible"<<nl;
        // else    cout<<dist[b]<<nl;
    }
}
int main(){
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    // int t;
    // cin>>t;
    // while(t--)
    solve();   
}
