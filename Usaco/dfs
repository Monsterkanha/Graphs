suppose, we want to check whether there exist a full connecting while removing a element.
instead of removing all the links from that node, just use another bool vector that will tell us whether this node is available or not.


#include <bits/stdc++.h>

using namespace std;


// const int maxN = 3005;
// vector<int> adj[maxN] , vis(maxN);

int32_t main() {
    freopen("closing.in", "r", stdin);
	freopen("closing.out", "w", stdout);
	ios_base::sync_with_stdio(0);
	cin.tie(0);

    int n , m; 
    cin>>n>>m;
    
    vector<int> adj[n+1] , closed(n+1);
    vector<bool> vis(n+1);
    for(int i = 0; i < m ; i++){
        int u , v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    function<void(int)> dfs = [&](int node){
        vis[node] = 1;
        for(auto& x: adj[node]){
            if(!vis[x] && !closed[x]) dfs(x);
        }
    };
    
    for(int i = 0; i < n; i++){
        fill(vis.begin() , vis.end() , false);
        int temp;
        cin>>temp;

        int count = 0;
        for(int i = 1; i <= n; i++){
            if(!vis[i] && !closed[i]){
                if(count){
                    cout<<"NO"<<"\n";
                    goto next;
                }
                count++;
                dfs(i);
            }
        }
        cout<<"YES"<<"\n";
        next:
        closed[temp] = 1;

    }
}


